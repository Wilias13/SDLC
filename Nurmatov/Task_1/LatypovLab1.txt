Program.csusing System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;using System.IO;namespace latypovLab1{        class Program    {        static void Main(string[] args)        {            Console.WriteLine("DriveInfo Practice");            DriveInfo[] driveInfos = DriveInfo.GetDrives();            foreach (var d in driveInfos){                Console.WriteLine($"Name : {d.Name}");                Console.WriteLine($"Size : {d.TotalSize}");                Console.WriteLine($"Format : {d.DriveFormat}");                Console.WriteLine($"Label : {d.VolumeLabel}");                Console.WriteLine();            }            while (true)            {                Console.WriteLine("Select Excercize");                Console.WriteLine("1 - Files Practice");                Console.WriteLine("2 - JSON Practice");                Console.WriteLine("3 - XML Practice");                Console.WriteLine("4 - ZIP Practice");                //int inp = Convert.ToInt32(Console.ReadLine());                string inp = Console.ReadLine();                switch (inp)                {                    case "1":                        {                            FileHelper fl = new FileHelper();                            fl.fileunction();                            break;                        }                    case "2":                        {                            JSONHelper jh = new JSONHelper();                            jh.Jsonfunc();                            break;                        }                    case "3":                        {                            XMLhelper xh = new XMLhelper();                            xh.XMLfunc();                            break;                        }                    case "4":                        {                            zIPHelper zh = new zIPHelper();                            zh.ziper();                            break;                        }                    default: { Console.WriteLine("Try Again"); break; }                }            }        }    }}FileHelper.csusing System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;using System.IO;namespace latypovLab1{    class FileHelper    {        string path = Path.GetDirectoryName(Path.GetDirectoryName(System.IO.Directory.GetCurrentDirectory()));           public   void fileunction()        {            string file_name;            Console.WriteLine("Write file's name /n");            file_name = path + "\\" + Console.ReadLine() + "txt";            try            {                FileStream fileStream = new FileStream(file_name, FileMode.OpenOrCreate);                string text;                Console.WriteLine("Write some text");                text = Console.ReadLine();                byte[] array = System.Text.Encoding.Default.GetBytes(text);                fileStream.Write(array, 0, array.Length);                fileStream.Close();            }            catch (Exception ex)            {                Console.WriteLine("Exception! Something went wrong," + $" {ex.Message}" );            }                                        try            {                                                FileStream fs = new FileStream(file_name, FileMode.Open);                byte[] array = new byte[fs.Length];                fs.Read(array, 0, Convert.ToInt32(fs.Length));                Console.WriteLine(System.Text.Encoding.UTF8.GetString(array));                fs.Close();            }            catch (Exception ex)            {                Console.WriteLine("Exception! Something went wrong" + $" {ex.Message}");            }                    try            {                                File.Delete(file_name);            }            catch (Exception ex)            {                Console.WriteLine("Exception! Something went wrong" + $" {ex.Message}");            }        }    }}JSONHelper.cs//hackmd.io/@0x41/OS_Lab_1using System;using System.Collections.Generic;using System.Linq;using System.Text;using Newtonsoft.Json;using System.IO;namespace latypovLab1{    public class Account    {        public string nickname { get; set; }        public string email { get; set; }        public string phonenumber { get; set; }    }    class JSONHelper    {         string path = Path.GetDirectoryName(Path.GetDirectoryName(System.IO.Directory.GetCurrentDirectory()));              public void Jsonfunc()        {            Console.WriteLine("Write  file's name");            string jsonname = path +"\\"+ Console.ReadLine()+".json";            FileStream fs = File.Create(jsonname);            string input;            List<Account> accounts = new List<Account>();            while (true) {                Account acc = new Account();                Console.WriteLine("Enter Account's nickname : ");                input = Console.ReadLine();                acc.nickname = input;                Console.WriteLine("Enter Account's email : ");                input = Console.ReadLine();                acc.email = input;                Console.WriteLine("Enter Account's phone number : ");                input = Console.ReadLine();                acc.phonenumber = input;                accounts.Add(acc);                Console.WriteLine("Add another account  : Y/another symbol ");                input = Console.ReadLine();                if (input == "Y")                    continue;                else break;            }            string JsonFileData = JsonConvert.SerializeObject(accounts);            fs.Write(System.Text.Encoding.Default.GetBytes(JsonFileData), 0, JsonFileData.Length);            fs.Close();                    FileStream fs2 = new FileStream(jsonname, FileMode.Open);            byte[] array = new byte[fs2.Length];            fs2.Read(array, 0, Convert.ToInt32(fs2.Length));            var account1 = JsonConvert.DeserializeObject<List<Account>>(System.Text.Encoding.UTF8.GetString(array));            foreach(var el in account1)            {                Console.WriteLine("{0}  {1}  {2}", el.nickname, el.email, el.phonenumber);            }            fs2.Close();                                if (File.Exists(jsonname))                File.Delete(jsonname);                   }    }}xMLhelper.csusing System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;using System.Xml;using System.Xml.Serialization;using System.IO;namespace latypovLab1{       class XMLhelper    {        string path = Path.GetDirectoryName(Path.GetDirectoryName(System.IO.Directory.GetCurrentDirectory()));              public  void XMLfunc()        {            Console.WriteLine("Write new file's name");            string xmlfile =path+"\\" + Console.ReadLine()+".txt";            XmlDocument xml = new XmlDocument();            string input;            List<Account> accounts = new List<Account>();            while (true)            {                Account acc = new Account();                Console.WriteLine("Enter Account's nickname : ");                input = Console.ReadLine();                acc.nickname = input;                Console.WriteLine("Enter Account's email : ");                input = Console.ReadLine();                acc.email = input;                Console.WriteLine("Enter Account's phone number : ");                input = Console.ReadLine();                acc.phonenumber = input;                accounts.Add(acc);                Console.WriteLine("Add another account  : Y/another symbol ");                input = Console.ReadLine();                if (input == "Y")                    continue;                else break;            }            var xmlSerializer = new XmlSerializer(typeof(List<Account>));            var stringWriter = new StringWriter();            xmlSerializer.Serialize(stringWriter, accounts);            string xmlstr = stringWriter.ToString();            if(!File.Exists(xmlfile))                File.WriteAllText(xmlfile, xmlstr);                    //XmlDocument xmldoc = new XmlDocument();                        //List<Account> accounts = new List<Account>();            //while (true)            //{            //    Account acc = new Account();            //    Console.WriteLine("Enter Account's nickname : ");            //    input = Console.ReadLine();            //    acc.nickname = input;            //    Console.WriteLine("Enter Account's email : ");            //    input = Console.ReadLine();            //    acc.email = input;            //    Console.WriteLine("Enter Account's phone number : ");            //    input = Console.ReadLine();            //    acc.phonenumber = input;            //    accounts.Add(acc);            //    Console.WriteLine("Add another account  : Y/another symbol ");            //    input = Console.ReadLine();            //    if (input == "Y")            //        continue;            //    else break;            //}            //var xmlSerializer = new XmlSerializer(typeof(Account));            //var stringWriter = new StringWriter();            //xmlSerializer.Serialize(stringWriter, accounts);            //string xmlstr = stringWriter.ToString();            //if (File.Exists(xmlfile))            //    File.AppendAllText(xmlfile, xmlstr);                                if (!File.Exists(xmlfile))                return;            StreamReader SR = new StreamReader(xmlfile);                                    var xmlSerializer1 = new XmlSerializer(typeof(Account));            List<Account> account1 = (List<Account>)xmlSerializer.Deserialize(SR);            foreach(var el in account1)            {                Console.WriteLine("{0}  {1}  {2}", el.nickname, el.email, el.phonenumber);            }                        SR.Close();                                if (!File.Exists(xmlfile))                return;            File.Delete(xmlfile);        }    }}ziPhelper.csusing System;using System.IO.Compression;using System.IO;namespace latypovLab1{    class zIPHelper    {       public void ziper()        {            string path = Path.GetDirectoryName(Path.GetDirectoryName(System.IO.Directory.GetCurrentDirectory()));            Console.WriteLine("Write filename");            string pathfile = path + "\\" + Console.ReadLine();            Console.WriteLine("Write new zipfilename");            string zipfile = path + "\\" + Console.ReadLine();            string newflie = path + "\\" + "new.txt";            ZipFile.CreateFromDirectory(pathfile, zipfile);            using (FileStream sourceStream = new FileStream(zipfile, FileMode.OpenOrCreate))            {                using (FileStream targetStream = File.Create(newflie))                {                    using (GZipStream decompressionStream = new GZipStream(sourceStream, CompressionMode.Decompress))                    {                        decompressionStream.CopyTo(targetStream);                        Console.WriteLine("Decompressed: {0}", newflie);                    }                    Console.WriteLine("Size {0}", targetStream.Length);                }                File.Delete(newflie);                File.Delete(zipfile);                            }            Console.WriteLine("Done!");        }    }}Pythonimport osimport jsonimport xmlencoding = 'utf-8'class Man:    nam = str     Age = intmy_file = open("BabyFile.txt", "w+")my_file.write("Привет, файл!")my_file.close()file = open("BabyFile.txt", "r")print(file.read())file.close()os.remove("BabyFile.txt")jsonfile = open("BabyFile.json", "w+")me = Man()me.Age=21me.nam="Ilias"jsonstr = json.dumps(me, default=lambda o: o.__dict__, sort_keys=True, indent=4)print(jsonstr)jsonfile.write(jsonstr)jsonfile.close()jsonfile = open("BabyFile.json", "r")print(jsonfile.read())jsonfile.close()os.remove("BabyFile.json")import xml.etree.ElementTree as ETname1=input()name2=input()data = ET.Element(name1)item = ET.SubElement(data,name2)mydata = ET.tostring(data)file = open("items.xml","w+")file.write(mydata.decode(encoding))file.close()myfile =open ("items.xml","r")print(myfile.read())myfile.close()os.remove("items.xml")file = open(os.environ['USERPROFILE'] + '\Desktop'+'\items.txt',"w+")file.write("asdasdasdasd")file.close()import shutilshutil.make_archive(os.environ['USERPROFILE'] + '\Desktop' +'\pet1', 'zip', os.environ['USERPROFILE'] + '\Desktop','items.txt')import zipfile#print(os.environ['USERPROFILE'] + '\Desktop' +'\pet.zip')fantasy_zip = zipfile.ZipFile(os.environ['USERPROFILE'] + '\Desktop' +'\pet1.zip')fantasy_zip.extract('items.txt',os.environ['USERPROFILE'] + '\Desktop'+'\ecxFiles')fantasy_zip.close()file = open(os.environ['USERPROFILE'] + '\Desktop'+'\ecxFiles'+'\items.txt',"r")print(file.read())file.close()shutil.rmtree(os.environ['USERPROFILE'] + '\Desktop'+'\ecxFiles')os.remove(os.environ['USERPROFILE'] + '\Desktop'+'\items.txt')os.remove(os.environ['USERPROFILE'] + '\Desktop'+'\pet1.zip')